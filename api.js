const { google } = require('googleapis');
const fs = require('fs');
const path = require('path');
const axios = require('axios');

// Import c√°c module c·∫ßn thi·∫øt
const { downloadFromDriveId, OUTPUT_DIR, TEMP_DIR } = require('./app.js');
const { PDFProcessor } = require('./pdf.js');
const TOKEN_PATH = "token.json";
class DriveAPI {
    constructor() {
        this.drive = null;
        this.auth = null;
    }

    async initialize() {
        try {
            console.log('üîë Kh·ªüi t·∫°o Drive API...');
            const credentials = {
                "client_id": "58168105452-b1ftgklngm45smv9vj417t155t33tpih.apps.googleusercontent.com",
                "project_id": "annular-strata-438914-c0",
                "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                "token_uri": "https://oauth2.googleapis.com/token",
                "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                "client_secret": "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",
                "redirect_uris": ["http://localhost:3000/api/auth/google-callback"]
            };
            
            this.auth = new google.auth.OAuth2(
                credentials.client_id,
                credentials.client_secret,
                credentials.redirect_uris[0]
            );

            // Ki·ªÉm tra token ƒë√£ l∆∞u
            if (fs.existsSync(TOKEN_PATH)) {
                const token = JSON.parse(fs.readFileSync(TOKEN_PATH));
                this.auth.setCredentials(token);
            } else {
                await this.getNewToken();
            }

            this.drive = google.drive({ version: 'v3', auth: this.auth });
            console.log('‚úÖ Kh·ªüi t·∫°o Drive API th√†nh c√¥ng');
        } catch (error) {
            console.error('‚ùå L·ªói kh·ªüi t·∫°o Drive API:', error.message);
            throw error;
        }
    }

    async getNewToken() {
        const authUrl = this.auth.generateAuthUrl({
            access_type: 'offline',
            scope: SCOPES,
        });

        console.log('üì± Truy c·∫≠p URL n√†y ƒë·ªÉ x√°c th·ª±c:', authUrl);
        const code = await this.promptForCode();
        
        const { tokens } = await this.auth.getToken(code);
        this.auth.setCredentials(tokens);
        
        // L∆∞u token
        fs.writeFileSync(TOKEN_PATH, JSON.stringify(tokens));
        console.log('üíæ Token ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i:', TOKEN_PATH);
    }

    promptForCode() {
        const readline = require('readline');
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout,
        });

        return new Promise((resolve) => {
            rl.question('üìù Nh·∫≠p m√£ x√°c th·ª±c: ', (input) => {
                rl.close();
                // T√°ch m√£ x√°c th·ª±c t·ª´ URL
                const urlParams = new URLSearchParams(input.split('?')[1]);
                const code = urlParams.get('code');
                resolve(code);
            });
        });
    }

    async getFolderContents(folderId) {
        try {
            console.log(`üîç ƒêang qu√©t th∆∞ m·ª•c ${folderId}...`);
            const files = [];
            let pageToken = null;

            do {
                const response = await this.drive.files.list({
                    q: `'${folderId}' in parents and trashed = false`,
                    spaces: 'drive',
                    fields: 'nextPageToken, files(id, name, mimeType)',
                    pageToken: pageToken,
                    supportsAllDrives: true,
                    includeItemsFromAllDrives: true,
                });

                files.push(...response.data.files);
                pageToken = response.data.nextPageToken;
            } while (pageToken);

            return files;
        } catch (error) {
            console.error('‚ùå L·ªói khi l·∫•y n·ªôi dung th∆∞ m·ª•c:', error.message);
            throw error;
        }
    }

    async testConnection() {
        try {
            if (!this.drive) {
                throw new Error('Drive API ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');
            }

            // Th·ª≠ l·∫•y th√¥ng tin v·ªÅ Drive c·ªßa user
            const response = await this.drive.about.get({
                fields: 'user'
            });

            console.log('‚úÖ K·∫øt n·ªëi Drive API th√†nh c√¥ng');
            console.log('üë§ User:', response.data.user.displayName);
            return true;
        } catch (error) {
            console.error('‚ùå L·ªói k·∫øt n·ªëi Drive API:', error.message);
            return false;
        }
    }
}

// Th√™m ƒëo·∫°n code test ·ªü cu·ªëi file
async function testDriveAPI() {
    try {
        const driveAPI = new DriveAPI();
        await driveAPI.initialize();
        const testResult = await driveAPI.testConnection();
        
        if (testResult) {
            console.log('üéâ Test ho√†n t·∫•t: K·∫øt n·ªëi th√†nh c√¥ng');
        } else {
            console.log('‚ùå Test th·∫•t b·∫°i: Kh√¥ng th·ªÉ k·∫øt n·ªëi');
        }
    } catch (error) {
        console.error('‚ùå L·ªói trong qu√° tr√¨nh test:', error.message);
    }
}

async function listFolderContents() {
    try {
        const driveAPI = new DriveAPI();
        await driveAPI.initialize();
        
        // S·ª≠ d·ª•ng folder ID m·ªõi
        const folderId = "1MyQFPc1p-6yQEfxdR8TaoIU8ugVRulr8";
        
        const files = await driveAPI.getFolderContents(folderId);
        
        // Ph√¢n lo·∫°i files
        const pdfFiles = files.filter(file => 
            file.mimeType === 'application/pdf'
        );
        
        const videoFiles = files.filter(file => 
            file.mimeType.includes('video/') || 
            file.mimeType.includes('application/vnd.google-apps.video')
        );

        // X·ª≠ l√Ω PDF files
        if (pdfFiles.length > 0) {
            console.log(`\nüìë T√¨m th·∫•y ${pdfFiles.length} file PDF - B·∫Øt ƒë·∫ßu x·ª≠ l√Ω...`);
            const pdfProcessor = new PDFProcessor(driveAPI);
            await pdfProcessor.processFiles(pdfFiles);
        }

        // X·ª≠ l√Ω Video files
        if (videoFiles.length > 0) {
            console.log(`\nüé• T√¨m th·∫•y ${videoFiles.length} file video - B·∫Øt ƒë·∫ßu x·ª≠ l√Ω...`);
            for (const file of videoFiles) {
                try {
                    console.log(`\n‚è≥ ƒêang x·ª≠ l√Ω video: ${file.name}`);
                    await downloadFromDriveId(file.id, file.name);
                } catch (error) {
                    console.error(`‚ùå L·ªói khi x·ª≠ l√Ω video ${file.name}:`, error.message);
                }
            }
        }

        if (pdfFiles.length === 0 && videoFiles.length === 0) {
            console.log('\n‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file PDF ho·∫∑c video n√†o trong th∆∞ m·ª•c.');
        }
        
    } catch (error) {
        console.error('‚ùå L·ªói:', error.message);
    }
}

// Ch·∫°y test v√† x·ª≠ l√Ω folder
testDriveAPI();
listFolderContents();