const { google } = require('googleapis');
const fs = require('fs');
const path = require('path');
const axios = require('axios');
<<<<<<< HEAD
const puppeteer = require('puppeteer');

// Import c√°c module c·∫ßn thi·∫øt
const { downloadFromDriveId, OUTPUT_DIR, TEMP_DIR, VIDEO_OUTPUT_DIR } = require('./app.js');
=======

// Import c√°c module c·∫ßn thi·∫øt
const { downloadFromDriveId, OUTPUT_DIR, TEMP_DIR } = require('./app.js');
>>>>>>> b3f67cd8dc95596ddeb683492a271c14469f3b34
const { PDFProcessor } = require('./pdf.js');
const TOKEN_PATH = "token.json";
class DriveAPI {
    constructor() {
        this.drive = null;
        this.auth = null;
    }

    async initialize() {
        try {
            console.log('üîë Kh·ªüi t·∫°o Drive API...');
            const credentials = {
                "client_id": "58168105452-b1ftgklngm45smv9vj417t155t33tpih.apps.googleusercontent.com",
                "project_id": "annular-strata-438914-c0",
                "auth_uri": "https://accounts.google.com/o/oauth2/auth",
                "token_uri": "https://oauth2.googleapis.com/token",
                "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
                "client_secret": "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",
                "redirect_uris": ["http://localhost:3000/api/auth/google-callback"]
            };
            
            this.auth = new google.auth.OAuth2(
                credentials.client_id,
                credentials.client_secret,
                credentials.redirect_uris[0]
            );

            // Ki·ªÉm tra token ƒë√£ l∆∞u
            if (fs.existsSync(TOKEN_PATH)) {
                const token = JSON.parse(fs.readFileSync(TOKEN_PATH));
                this.auth.setCredentials(token);
<<<<<<< HEAD
                
                // Ki·ªÉm tra token c√≤n h·∫°n kh√¥ng
                try {
                    console.log('üîç Ki·ªÉm tra token...');
                    this.drive = google.drive({ version: 'v3', auth: this.auth });
                    await this.testConnection();
                } catch (error) {
                    console.log('‚ö†Ô∏è Token h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá, ƒëang l√†m m·ªõi...');
                    await this.getNewToken();
                }
            } else {
                console.log('‚ö†Ô∏è Ch∆∞a c√≥ token, ti·∫øn h√†nh x√°c th·ª±c...');
=======
            } else {
>>>>>>> b3f67cd8dc95596ddeb683492a271c14469f3b34
                await this.getNewToken();
            }

            this.drive = google.drive({ version: 'v3', auth: this.auth });
            console.log('‚úÖ Kh·ªüi t·∫°o Drive API th√†nh c√¥ng');
<<<<<<< HEAD
            
            // Hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi d√πng
            const userInfo = await this.drive.about.get({
                fields: 'user'
            });
            console.log('üë§ ƒê√£ ƒëƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n:', userInfo.data.user.emailAddress);
            
=======
>>>>>>> b3f67cd8dc95596ddeb683492a271c14469f3b34
        } catch (error) {
            console.error('‚ùå L·ªói kh·ªüi t·∫°o Drive API:', error.message);
            throw error;
        }
    }

    async getNewToken() {
<<<<<<< HEAD
        try {
            const authUrl = this.auth.generateAuthUrl({
                access_type: 'offline',
                scope: ['https://www.googleapis.com/auth/drive.file',
                       'https://www.googleapis.com/auth/drive.readonly'],
                prompt: 'consent' // Lu√¥n y√™u c·∫ßu refresh token
            });

            console.log('üîë ƒêang t·ª± ƒë·ªông x√°c th·ª±c...');
            
            // Kh·ªüi ƒë·ªông browser
            const browser = await puppeteer.launch({
                headless: false, // Hi·ªán browser ƒë·ªÉ d·ªÖ debug
                args: ['--no-sandbox', '--disable-setuid-sandbox']
            });

            const page = await browser.newPage();
            
            // Theo d√µi redirects
            let authCode = null;
            page.on('request', request => {
                const url = request.url();
                if (url.includes('localhost:3000/api/auth/google-callback')) {
                    const urlParams = new URLSearchParams(new URL(url).search);
                    authCode = urlParams.get('code');
                }
            });

            // Truy c·∫≠p trang x√°c th·ª±c
            await page.goto(authUrl);

            // ƒê·ª£i cho ƒë·∫øn khi c√≥ code ho·∫∑c timeout sau 2 ph√∫t
            const timeoutPromise = new Promise((_, reject) => 
                setTimeout(() => reject(new Error('Timeout waiting for auth')), 120000)
            );
            
            const codePromise = new Promise(resolve => {
                const checkCode = setInterval(() => {
                    if (authCode) {
                        clearInterval(checkCode);
                        resolve(authCode);
                    }
                }, 1000);
            });

            const code = await Promise.race([codePromise, timeoutPromise]);
            
            // ƒê√≥ng browser
            await browser.close();

            if (!code) {
                throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c m√£ x√°c th·ª±c');
            }

            // L·∫•y token t·ª´ code
            const { tokens } = await this.auth.getToken(code);
            this.auth.setCredentials(tokens);
            
            // L∆∞u token
            fs.writeFileSync(TOKEN_PATH, JSON.stringify(tokens));
            console.log('‚úÖ ƒê√£ l∆∞u token x√°c th·ª±c');

            return tokens;

        } catch (error) {
            console.error('‚ùå L·ªói khi l·∫•y token:', error.message);
            throw error;
        }
=======
        const authUrl = this.auth.generateAuthUrl({
            access_type: 'offline',
            scope: SCOPES,
        });

        console.log('üì± Truy c·∫≠p URL n√†y ƒë·ªÉ x√°c th·ª±c:', authUrl);
        const code = await this.promptForCode();
        
        const { tokens } = await this.auth.getToken(code);
        this.auth.setCredentials(tokens);
        
        // L∆∞u token
        fs.writeFileSync(TOKEN_PATH, JSON.stringify(tokens));
        console.log('üíæ Token ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i:', TOKEN_PATH);
    }

    promptForCode() {
        const readline = require('readline');
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout,
        });

        return new Promise((resolve) => {
            rl.question('üìù Nh·∫≠p m√£ x√°c th·ª±c: ', (input) => {
                rl.close();
                // T√°ch m√£ x√°c th·ª±c t·ª´ URL
                const urlParams = new URLSearchParams(input.split('?')[1]);
                const code = urlParams.get('code');
                resolve(code);
            });
        });
>>>>>>> b3f67cd8dc95596ddeb683492a271c14469f3b34
    }

    async getFolderContents(folderId) {
        try {
            console.log(`üîç ƒêang qu√©t th∆∞ m·ª•c ${folderId}...`);
            const files = [];
            let pageToken = null;

            do {
                const response = await this.drive.files.list({
                    q: `'${folderId}' in parents and trashed = false`,
                    spaces: 'drive',
                    fields: 'nextPageToken, files(id, name, mimeType)',
                    pageToken: pageToken,
                    supportsAllDrives: true,
                    includeItemsFromAllDrives: true,
                });

                files.push(...response.data.files);
                pageToken = response.data.nextPageToken;
            } while (pageToken);

            return files;
        } catch (error) {
            console.error('‚ùå L·ªói khi l·∫•y n·ªôi dung th∆∞ m·ª•c:', error.message);
            throw error;
        }
    }

    async testConnection() {
        try {
<<<<<<< HEAD
            await this.drive.files.list({
                pageSize: 1,
                fields: 'files(id, name)'
            });
            return true;
        } catch (error) {
            if (error.message.includes('invalid_grant') || 
                error.message.includes('Invalid Credentials') ||
                error.message.includes('token expired')) {
                throw new Error('Token h·∫øt h·∫°n');
            }
            throw error;
        }
    }

    async getFolderContentsRecursive(folderId, depth = 0) {
        try {
            console.log(`${'  '.repeat(depth)}üìÇ ƒêang qu√©t th∆∞ m·ª•c: ${folderId}`);
            let allFiles = [];
            let pageToken = null;

            do {
                const response = await this.drive.files.list({
                    q: `'${folderId}' in parents and trashed = false`,
                    spaces: 'drive',
                    fields: 'nextPageToken, files(id, name, mimeType)',
                    pageToken: pageToken,
                    supportsAllDrives: true,
                    includeItemsFromAllDrives: true
                });

                for (const file of response.data.files) {
                    if (file.mimeType === 'application/vnd.google-apps.folder') {
                        // N·∫øu l√† folder, qu√©t ƒë·ªá quy
                        console.log(`${'  '.repeat(depth)}üìÅ T√¨m th·∫•y th∆∞ m·ª•c con: ${file.name}`);
                        const subFiles = await this.getFolderContentsRecursive(file.id, depth + 1);
                        allFiles = allFiles.concat(subFiles);
                    } else {
                        // N·∫øu l√† file, th√™m v√†o danh s√°ch
                        allFiles.push({
                            ...file,
                            folderDepth: depth,
                            folderPath: await this.getFolderPath(folderId)
                        });
                    }
                }

                pageToken = response.data.nextPageToken;
            } while (pageToken);

            return allFiles;
        } catch (error) {
            console.error(`${'  '.repeat(depth)}‚ùå L·ªói khi qu√©t th∆∞ m·ª•c ${folderId}:`, error.message);
            throw error;
        }
    }

    async getFolderPath(folderId) {
        try {
            const path = [];
            let currentId = folderId;

            while (currentId) {
                const folder = await this.drive.files.get({
                    fileId: currentId,
                    fields: 'name, parents',
                    supportsAllDrives: true
                });

                path.unshift(folder.data.name);
                currentId = folder.data.parents ? folder.data.parents[0] : null;
            }

            return path.join('/');
        } catch (error) {
            console.error('‚ùå L·ªói khi l·∫•y ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c:', error.message);
            return '';
        }
    }

    async processFolderRecursive(folderId, depth = 0) {
        try {
            const folderInfo = await this.drive.files.get({
                fileId: folderId,
                fields: 'name',
                supportsAllDrives: true
            });
            
            console.log(`\n${'  '.repeat(depth)}üìÇ ƒêang qu√©t th∆∞ m·ª•c: ${folderInfo.data.name}`);
            let pageToken = null;

            do {
                const response = await this.drive.files.list({
                    q: `'${folderId}' in parents and trashed = false`,
                    spaces: 'drive',
                    fields: 'nextPageToken, files(id, name, mimeType)',
                    pageToken: pageToken,
                    supportsAllDrives: true,
                    includeItemsFromAllDrives: true
                });

                // Ph√¢n lo·∫°i files trong th∆∞ m·ª•c hi·ªán t·∫°i
                const currentFiles = response.data.files;
                const folders = currentFiles.filter(f => f.mimeType === 'application/vnd.google-apps.folder');
                const files = currentFiles.filter(f => f.mimeType !== 'application/vnd.google-apps.folder');

                if (files.length > 0) {
                    console.log(`${'  '.repeat(depth)}üìÑ T√¨m th·∫•y ${files.length} file trong th∆∞ m·ª•c ${folderInfo.data.name}`);
                    
                    // X·ª≠ l√Ω files trong th∆∞ m·ª•c hi·ªán t·∫°i
                    const pdfFiles = files.filter(f => f.mimeType === 'application/pdf');
                    const videoFiles = files.filter(f => 
                        f.mimeType.includes('video/') || 
                        f.mimeType.includes('application/vnd.google-apps.video')
                    );
                    const otherFiles = files.filter(f => 
                        !f.mimeType.includes('video/') && 
                        f.mimeType !== 'application/pdf'
                    );

                    // L·∫•y ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c hi·ªán t·∫°i
                    const currentPath = await this.getFolderPath(folderId);

                    // X·ª≠ l√Ω PDF files
                    if (pdfFiles.length > 0) {
                        console.log(`${'  '.repeat(depth)}üìë ƒêang t·∫£i ${pdfFiles.length} file PDF...`);
                        const pdfProcessor = new PDFProcessor(this);
                        for (const file of pdfFiles) {
                            try {
                                console.log(`${'  '.repeat(depth)}üìÑ T·∫£i: ${file.name}`);
                                await pdfProcessor.processFiles([{
                                    ...file,
                                    folderPath: currentPath
                                }]);
                            } catch (error) {
                                console.error(`‚ùå L·ªói khi t·∫£i PDF ${file.name}:`, error.message);
                            }
                        }
                    }

                    // X·ª≠ l√Ω Video files
                    if (videoFiles.length > 0) {
                        console.log(`${'  '.repeat(depth)}üé• ƒêang t·∫£i ${videoFiles.length} file video...`);
                        for (const file of videoFiles) {
                            try {
                                console.log(`${'  '.repeat(depth)}üé¨ T·∫£i: ${file.name}`);
                                let fileName = file.name;
                                if (!fileName.toLowerCase().endsWith('.mp4')) {
                                    fileName += '.mp4';
                                }
                                await downloadFromDriveId(file.id, path.join(currentPath, fileName));
                            } catch (error) {
                                console.error(`‚ùå L·ªói khi t·∫£i video ${file.name}:`, error.message);
                            }
                        }
                    }

                    // X·ª≠ l√Ω Other files
                    if (otherFiles.length > 0) {
                        console.log(`${'  '.repeat(depth)}üìÑ ƒêang t·∫£i ${otherFiles.length} file kh√°c...`);
                        for (const file of otherFiles) {
                            try {
                                const localPath = path.join(OUTPUT_DIR, 'others', currentPath);
                                if (!fs.existsSync(localPath)) {
                                    fs.mkdirSync(localPath, { recursive: true });
                                }
                                
                                console.log(`${'  '.repeat(depth)}üìÑ T·∫£i: ${file.name}`);
                                await this.drive.files.get(
                                    { fileId: file.id, alt: 'media' },
                                    { responseType: 'stream' }
                                ).then(response => {
                                    return new Promise((resolve, reject) => {
                                        const dest = fs.createWriteStream(path.join(localPath, file.name));
                                        response.data
                                            .on('end', () => resolve())
                                            .on('error', err => reject(err))
                                            .pipe(dest);
                                    });
                                });
                            } catch (error) {
                                console.error(`‚ùå L·ªói khi t·∫£i file ${file.name}:`, error.message);
                            }
                        }
                    }
                }

                // ƒê·ªá quy v√†o c√°c th∆∞ m·ª•c con
                for (const folder of folders) {
                    await this.processFolderRecursive(folder.id, depth + 1);
                }

                pageToken = response.data.nextPageToken;
            } while (pageToken);

        } catch (error) {
            console.error(`${'  '.repeat(depth)}‚ùå L·ªói khi x·ª≠ l√Ω th∆∞ m·ª•c:`, error.message);
        }
    }

    async createRootFolder() {
        try {
            console.log('\nüìÇ T·∫°o folder g·ªëc "video-drive-clone"...');
            
            // Ki·ªÉm tra xem folder ƒë√£ t·ªìn t·∫°i ch∆∞a
            const response = await this.drive.files.list({
                q: "name='video-drive-clone' and mimeType='application/vnd.google-apps.folder' and trashed=false",
                fields: 'files(id, name)',
                spaces: 'drive'
            });

            if (response.data.files.length > 0) {
                console.log('‚úÖ Folder ƒë√£ t·ªìn t·∫°i, s·ª≠ d·ª•ng folder c≈©');
                return response.data.files[0].id;
            }

            // T·∫°o folder m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i
            const folderMetadata = {
                name: 'video-drive-clone',
                mimeType: 'application/vnd.google-apps.folder'
            };

            const folder = await this.drive.files.create({
                resource: folderMetadata,
                fields: 'id'
            });

            console.log('‚úÖ ƒê√£ t·∫°o folder g·ªëc m·ªõi');
            return folder.data.id;
        } catch (error) {
            console.error('‚ùå L·ªói khi t·∫°o folder g·ªëc:', error.message);
            throw error;
        }
    }

    async checkFileExists(fileName, parentId) {
        try {
            const response = await this.drive.files.list({
                q: `name='${fileName}' and '${parentId}' in parents and trashed=false`,
                fields: 'files(id, name)',
                spaces: 'drive'
            });
            return response.data.files.length > 0 ? response.data.files[0] : null;
        } catch (error) {
            console.error(`‚ùå L·ªói khi ki·ªÉm tra file ${fileName}:`, error.message);
            return null;
        }
    }

    async checkFolderExists(folderName, parentId) {
        try {
            const query = parentId 
                ? `name='${folderName}' and mimeType='application/vnd.google-apps.folder' and '${parentId}' in parents and trashed=false`
                : `name='${folderName}' and mimeType='application/vnd.google-apps.folder' and trashed=false`;

            const response = await this.drive.files.list({
                q: query,
                fields: 'files(id, name)',
                spaces: 'drive'
            });
            return response.data.files.length > 0 ? response.data.files[0] : null;
        } catch (error) {
            console.error(`‚ùå L·ªói khi ki·ªÉm tra folder ${folderName}:`, error.message);
            return null;
        }
    }

    async downloadAndUploadFolder(sourceFolderId, parentId = null, depth = 0) {
        try {
            const sourceFolder = await this.drive.files.get({
                fileId: sourceFolderId,
                fields: 'name',
                supportsAllDrives: true
            });

            console.log(`\n${'  '.repeat(depth)}üìÇ ƒêang x·ª≠ l√Ω th∆∞ m·ª•c: ${sourceFolder.data.name}`);

            // Ki·ªÉm tra folder ƒë√£ t·ªìn t·∫°i ch∆∞a
            let targetFolder = await this.checkFolderExists(sourceFolder.data.name, parentId);
            let targetFolderId;
            
            if (targetFolder) {
                console.log(`${'  '.repeat(depth)}üìÅ Folder ƒë√£ t·ªìn t·∫°i: ${sourceFolder.data.name}`);
                targetFolderId = targetFolder.id; // L·∫•y ID tr·ª±c ti·∫øp t·ª´ k·∫øt qu·∫£ checkFolderExists
            } else {
                // T·∫°o folder m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i
                const folderMetadata = {
                    name: sourceFolder.data.name,
                    mimeType: 'application/vnd.google-apps.folder',
                    parents: parentId ? [parentId] : null
                };

                const newFolder = await this.drive.files.create({
                    resource: folderMetadata,
                    fields: 'id'
                });
                targetFolderId = newFolder.data.id;
                console.log(`${'  '.repeat(depth)}‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c m·ªõi: ${sourceFolder.data.name}`);
            }

            // X·ª≠ l√Ω c√°c files trong folder
            let pageToken = null;
            do {
                const response = await this.drive.files.list({
                    q: `'${sourceFolderId}' in parents and trashed = false`,
                    spaces: 'drive',
                    fields: 'nextPageToken, files(id, name, mimeType)',
                    pageToken: pageToken,
                    supportsAllDrives: true,
                    includeItemsFromAllDrives: true
                });

                for (const item of response.data.files) {
                    if (item.mimeType === 'application/vnd.google-apps.folder') {
                        // N·∫øu l√† folder, ƒë·ªá quy v·ªõi targetFolderId
                        await this.downloadAndUploadFolder(item.id, targetFolderId, depth + 1);
                    } else {
                        try {
                            // Ki·ªÉm tra file ƒë√£ t·ªìn t·∫°i
                            const existingFile = await this.checkFileExists(item.name, targetFolderId);
                            const videoPath = path.join(VIDEO_OUTPUT_DIR, item.name);
                            const tempFilePath = path.join(TEMP_DIR, `temp_${Date.now()}_${item.name}`);
                            
                            if (existingFile) {
                                console.log(`${'  '.repeat(depth)}üìÑ File ƒë√£ t·ªìn t·∫°i: ${item.name}`);
                                // Ki·ªÉm tra v√† x√≥a file local n·∫øu t·ªìn t·∫°i
                                if (fs.existsSync(videoPath)) {
                                    try {
                                        fs.unlinkSync(videoPath);
                                        console.log(`${'  '.repeat(depth)}üóëÔ∏è ƒê√£ x√≥a file video local: ${item.name}`);
                                    } catch (err) {
                                        console.warn(`${'  '.repeat(depth)}‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a file video local: ${item.name}`, err.message);
                                    }
                                }
                                // Ki·ªÉm tra v√† x√≥a file t·∫°m n·∫øu t·ªìn t·∫°i
                                const tempFiles = fs.readdirSync(TEMP_DIR);
                                for (const tempFile of tempFiles) {
                                    if (tempFile.includes(item.name)) {
                                        try {
                                            fs.unlinkSync(path.join(TEMP_DIR, tempFile));
                                            console.log(`${'  '.repeat(depth)}üóëÔ∏è ƒê√£ x√≥a file t·∫°m: ${tempFile}`);
                                        } catch (err) {
                                            console.warn(`${'  '.repeat(depth)}‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a file t·∫°m: ${tempFile}`, err.message);
                                        }
                                    }
                                }
                                continue;
                            }

                            if (item.mimeType.includes('video')) {
                                console.log(`üì• ƒêang t·∫£i video: ${item.name}`);
                                try {
                                    // Truy·ªÅn this (DriveAPI instance) v√†o h√†m getVideoUrl
                                    await downloadFromDriveId(item.id, item.name, this);
                                    // ... code x·ª≠ l√Ω ti·∫øp theo ...
                                } catch (error) {
                                    // ... x·ª≠ l√Ω l·ªói ...
                                }
                            }

                          
                            
                            try {
                                console.log(`${'  '.repeat(depth)}üì• ƒêang t·∫£i: ${item.name}`);
                                await this.drive.files.get(
                                    { fileId: item.id, alt: 'media' },
                                    { responseType: 'stream' }
                                ).then(response => {
                                    return new Promise((resolve, reject) => {
                                        const dest = fs.createWriteStream(tempFilePath);
                                        response.data
                                            .on('end', () => resolve())
                                            .on('error', err => reject(err))
                                            .pipe(dest);
                                    });
                                });

                                // Upload file
                                console.log(`${'  '.repeat(depth)}üì§ ƒêang upload: ${item.name}`);
                                const fileMetadata = {
                                    name: item.name,
                                    parents: [targetFolderId]
                                };

                                const media = {
                                    mimeType: item.mimeType,
                                    body: fs.createReadStream(tempFilePath)
                                };

                                // Upload v√† ƒë·ª£i ho√†n th√†nh
                                await this.drive.files.create({
                                    resource: fileMetadata,
                                    media: media,
                                    fields: 'id'
                                });

                                console.log(`${'  '.repeat(depth)}‚úÖ Upload th√†nh c√¥ng: ${item.name}`);

                                // Ch·ªâ x√≥a sau khi upload th√†nh c√¥ng
                                if (fs.existsSync(tempFilePath)) {
                                    await new Promise(resolve => setTimeout(resolve, 1000));
                                    fs.unlinkSync(tempFilePath);
                                    console.log(`${'  '.repeat(depth)}üóëÔ∏è ƒê√£ x√≥a file t·∫°m: ${item.name}`);
                                }

                            } catch (error) {
                                console.error(`${'  '.repeat(depth)}‚ùå L·ªói x·ª≠ l√Ω file: ${error.message}`);
                                // D·ªçn d·∫πp n·∫øu c√≥ l·ªói
                                try {
                                    if (fs.existsSync(tempFilePath)) {
                                        fs.unlinkSync(tempFilePath);
                                    }
                                } catch (cleanupError) {
                                    console.warn(`${'  '.repeat(depth)}‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a file t·∫°m: ${cleanupError.message}`);
                                }
                            }
                        } catch (error) {
                            console.error(`${'  '.repeat(depth)}‚ùå L·ªói: ${error.message}`);
                            // D·ªçn d·∫πp n·∫øu c√≥ l·ªói
                            try {
                                const videoPath = path.join(VIDEO_OUTPUT_DIR, item.name);
                                if (fs.existsSync(videoPath)) {
                                    fs.unlinkSync(videoPath);
                                    console.log(`${'  '.repeat(depth)}üóëÔ∏è ƒê√£ x√≥a file sau l·ªói: ${item.name}`);
                                }
                                // D·ªçn d·∫πp files t·∫°m li√™n quan
                                const tempFiles = fs.readdirSync(TEMP_DIR);
                                for (const tempFile of tempFiles) {
                                    if (tempFile.includes(item.name)) {
                                        fs.unlinkSync(path.join(TEMP_DIR, tempFile));
                                        console.log(`${'  '.repeat(depth)}üóëÔ∏è ƒê√£ x√≥a file t·∫°m sau l·ªói: ${tempFile}`);
                                    }
                                }
                            } catch (cleanupError) {
                                console.warn(`${'  '.repeat(depth)}‚ö†Ô∏è Kh√¥ng th·ªÉ d·ªçn d·∫πp sau l·ªói: ${cleanupError.message}`);
                            }
                        }
                    }
                }

                pageToken = response.data.nextPageToken;
            } while (pageToken);

        } catch (error) {
            console.error(`${'  '.repeat(depth)}‚ùå L·ªói:`, error.message);
=======
            if (!this.drive) {
                throw new Error('Drive API ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o');
            }

            // Th·ª≠ l·∫•y th√¥ng tin v·ªÅ Drive c·ªßa user
            const response = await this.drive.about.get({
                fields: 'user'
            });

            console.log('‚úÖ K·∫øt n·ªëi Drive API th√†nh c√¥ng');
            console.log('üë§ User:', response.data.user.displayName);
            return true;
        } catch (error) {
            console.error('‚ùå L·ªói k·∫øt n·ªëi Drive API:', error.message);
            return false;
>>>>>>> b3f67cd8dc95596ddeb683492a271c14469f3b34
        }
    }
}

<<<<<<< HEAD
async function cloneFolderToDrive() {
    try {
      const driveAPI = new DriveAPI();
      await driveAPI.initialize();

      // T·∫°o folder g·ªëc "video-drive-clone"
      const rootFolderId = await driveAPI.createRootFolder();
      console.log(`üìÅ Folder g·ªëc ID: ${rootFolderId}`);

      // ID folder ngu·ªìn c·∫ßn copyhttps://drive.google.com/drive/u/3/folders/1DcmFSoMDVRhPzFtOFrXwK2Z9QTCiwh-Y
      const sourceFolderId = "1s-rCF0EUab3hCZn5bgWAclDuTsmC4dBN";

      console.log('\nüöÄ B·∫Øt ƒë·∫ßu sao ch√©p v√†o folder "video-drive-clone"...');
      await driveAPI.downloadAndUploadFolder(sourceFolderId, rootFolderId);
      console.log("\n‚úÖ Ho√†n th√†nh sao ch√©p!");

      console.log(
        '\nüìÇ B·∫°n c√≥ th·ªÉ t√¨m th·∫•y t·∫•t c·∫£ files trong folder "video-drive-clone" tr√™n Drive c·ªßa b·∫°n'
      );
=======
// Th√™m ƒëo·∫°n code test ·ªü cu·ªëi file
async function testDriveAPI() {
    try {
        const driveAPI = new DriveAPI();
        await driveAPI.initialize();
        const testResult = await driveAPI.testConnection();
        
        if (testResult) {
            console.log('üéâ Test ho√†n t·∫•t: K·∫øt n·ªëi th√†nh c√¥ng');
        } else {
            console.log('‚ùå Test th·∫•t b·∫°i: Kh√¥ng th·ªÉ k·∫øt n·ªëi');
        }
    } catch (error) {
        console.error('‚ùå L·ªói trong qu√° tr√¨nh test:', error.message);
    }
}

async function listFolderContents() {
    try {
        const driveAPI = new DriveAPI();
        await driveAPI.initialize();
        
        // S·ª≠ d·ª•ng folder ID m·ªõi
        const folderId = "1MyQFPc1p-6yQEfxdR8TaoIU8ugVRulr8";
        
        const files = await driveAPI.getFolderContents(folderId);
        
        // Ph√¢n lo·∫°i files
        const pdfFiles = files.filter(file => 
            file.mimeType === 'application/pdf'
        );
        
        const videoFiles = files.filter(file => 
            file.mimeType.includes('video/') || 
            file.mimeType.includes('application/vnd.google-apps.video')
        );

        // X·ª≠ l√Ω PDF files
        if (pdfFiles.length > 0) {
            console.log(`\nüìë T√¨m th·∫•y ${pdfFiles.length} file PDF - B·∫Øt ƒë·∫ßu x·ª≠ l√Ω...`);
            const pdfProcessor = new PDFProcessor(driveAPI);
            await pdfProcessor.processFiles(pdfFiles);
        }

        // X·ª≠ l√Ω Video files
        if (videoFiles.length > 0) {
            console.log(`\nüé• T√¨m th·∫•y ${videoFiles.length} file video - B·∫Øt ƒë·∫ßu x·ª≠ l√Ω...`);
            for (const file of videoFiles) {
                try {
                    console.log(`\n‚è≥ ƒêang x·ª≠ l√Ω video: ${file.name}`);
                    await downloadFromDriveId(file.id, file.name);
                } catch (error) {
                    console.error(`‚ùå L·ªói khi x·ª≠ l√Ω video ${file.name}:`, error.message);
                }
            }
        }

        if (pdfFiles.length === 0 && videoFiles.length === 0) {
            console.log('\n‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file PDF ho·∫∑c video n√†o trong th∆∞ m·ª•c.');
        }
        
>>>>>>> b3f67cd8dc95596ddeb683492a271c14469f3b34
    } catch (error) {
        console.error('‚ùå L·ªói:', error.message);
    }
}

<<<<<<< HEAD
// Ch·∫°y ch∆∞∆°ng tr√¨nh
cloneFolderToDrive();
=======
// Ch·∫°y test v√† x·ª≠ l√Ω folder
testDriveAPI();
listFolderContents();
>>>>>>> b3f67cd8dc95596ddeb683492a271c14469f3b34
